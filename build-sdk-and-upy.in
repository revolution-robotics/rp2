#!/usr/bin/env bash
#
# @(#) install-pico-sdk
#
# Given a base directory, basedir, and Raspberry Pi Pico board type,
# e.g., `pico' or `pico_w', this script clones and builds Raspberry Pi
# Pico and MicroPython software repositories under basedir per
# "Getting started with Raspberry Pi Pico".*
#
# * https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf
#
: ${APT_CMD:='@APT_CMD@'}
: ${AUTOUPDATE_CMD:='@AUTOUPDATE_CMD@'}
: ${CAT_CMD:='@CAT_CMD@'}
: ${CMAKE_CMD:='@CMAKE_CMD@'}
: ${DNF_CMD:='@DNF_CMD@'}
: ${ED_CMD:='@ED_CMD@'}
: ${GIT_CMD:='@GIT_CMD@'}
: ${GREP_CMD:='@GREP_CMD@'}
: ${ID_CMD:='@ID_CMD@'}
: ${INSTALL_CMD:='@INSTALL_CMD@'}
: ${MAKE_CMD:='@MAKE_CMD@'}
: ${NPROC_CMD:='@NPROC_CMD@'}
: ${PORT_CMD:='@PORT_CMD@'}
: ${READLINK_CMD:='@READLINK_CMD@'}
: ${SED_CMD:='@SED_CMD@'}
: ${SUDO_CMD:='@SUDO_CMD@'}
: ${UDEVADM_CMD:='@UDEVADM_CMD@'}

: ${PREREQUISITES_INSTALLED:='false'}

# OS-agnstoic readlink for existent files/directories.
resolve-existing ()
{
    if $READLINK_CMD --version 2>&1 | $GREP_CMD -q 'coreutils'; then
        $READLINK_CMD -e "$@"
    else
        $READLINK_CMD -f N "$@"
    fi
}

initialize-git-config ()
{
    if ! $GIT_CMD config --global --get user.name >/dev/null; then
        $GIT_CMD config --global user.name 'Raspberry Pi User'
    fi

    if ! $GIT_CMD config --global --get user.email >/dev/null; then
        $GIT_CMD config --global user.email "${USER}@raspberry.org"
    fi

    if ! $GIT_CMD config --global --get pull.rebase >/dev/null; then
        $GIT_CMD config --global  pull.rebase false
    fi
}

count-installed-packages ()
{
    local -n params=$1

    case "${params[id]}" in
        debian|ubuntu)
            $SUDO_CMD $APT_CMD list --installed 2>/dev/null |
                $GREP_CMD -c '\[installed\]'
            ;;
        fedora)
            $SUDO_CMD $DNF list --recent |
                $GREP_CMD -E -c '\s@[a-z]'
            ;;
        darwin*)
            $SUDO_CMD $PORT_CMD installed active |
                $GREP_CMD -c '(active)'
            ;;
        *)
            echo "${script_name}: Unsupported platform" >&2
            return 1
            ;;
    esac
}

install-prerequisites ()
{
    local -n params=$1

    local -a git_deps=(
        git
        git-lfs
    )
    local -a sdk_deps=(
        cmake
    )
    local -a openocd_deps=(
        automake
        autoconf
        texinfo
        libtool
        usbutils
    )
    local tty_deps=(
        screen
    )

    echo "*** Installing prerequisites for Pico SDK and MicroPython" >&2
    $SUDO_CMD $INSTALL_CMD -d -m 0755 -o "$($ID_CMD -un)" -g "$($ID_CMD -gn)" \
              "${params[pico-basedir]}" || return $?

    case "${params[id]}" in
        debian|ubuntu)
            sdk_deps+=(
                g++
                gcc
                gcc-arm-none-eabi
                libstdc++-arm-none-eabi-newlib
            )
            openocd_deps+=(
                gdb-multiarch
                gpiod
                build-essential
                libftdi-dev
                libgpiod-dev
                libusb-1.0-0-dev
            )
            micropython_deps+=(
                libnewlib-arm-none-eabi
            )

            $SUDO_CMD $APT_CMD update || return $?
            $SUDO_CMD $APT_CMD -y install "${git_deps[@]}" \
                      "${sdk_deps[@]}" "${openocd_deps[@]}" "${tty_deps[@]}" \
                || return $?
            ;;
        fedora)
            sdk_deps+=(
                arm-none-eabi-binutils-cs
                arm-none-eabi-gcc-cs
                arm-none-eabi-gcc-cs-c++
            )
            openocd_deps+=(
                autoconf-archive
                gdb
                libftdi-devel
                libusb1-devel
            )
            micropython_deps+=(
                arm-none-eabi-newlib
            )


            $SUDO_CMD $DNF_CMD -y group install \
                      'C Development Tools and Libraries' || return $?
            $SUDO_CMD $DNF_CMD -y install "${git_deps[@]}" \
                      "${sdk_deps[@]}" "${openocd_deps[@]}" \
                      "${tty_deps[@]}" || return $?
            ;;
        darwin)
            sdk_deps+=(
                arm-none-eabi-gcc
                gcc12
            )
            openocd_deps+=(
                libftdi1
                libusb
            )
            $SUDO_CMD $PORT_CMD -N install "${git_deps[@]}" "${sdk_deps[@]}" \
                 "${openocd_deps[@]}" "${tty_deps[@]}" || return $?
            ;;
        *)
            echo "${script_name}: Unsupported platform" >&2
            return 1
            ;;
    esac

    export PICO_BOARD=${params[pico-board],,} \
           PICO_BASEDIR=${params[pico-basedir]} \
           PICO_SDK_PATH=${params[pico-basedir]}/pico-sdk \
           PICO_EXAMPLES_PATH=${params[pico-basedir]}/pico-examples \
           PICO_EXTRAS_PATH=${params[pico-basedir]}/pico-extras \
           PICO_PLAYGROUND_PATH=${params[pico-basedir]}/pico-playground
}

clone-repositories ()
{
    local -n params=$1
    local -n repos=$2

    local branch=''
    local base_url=''
    local repo=''
    local dest=''

    for repo in "${repos[@]}"; do
        branch=${params[default-branch]}

        if [[ ."$repo" =~ ^\.(.+)\.(.+)/(.+)$ ]]; then
            base_url=${BASH_REMATCH[1]}
            repo=${BASH_REMATCH[2]}
            branch=${BASH_REMATCH[3]}
        elif [[ ."$repo" =~ ^\.(.+)\.(.+)$ ]]; then
            base_url=${BASH_REMATCH[1]}
            repo=${BASH_REMATCH[2]}
        else
            echo "${script_name}: ${repo}: Invalid repository format" >&2
            return 1
        fi

        dest=${PICO_BASEDIR}/${repo}

        if test ."$repo" = .'libgpiod' && test ."${params[id]}" != .'fedora'; then
            continue
        fi

        if [ -d "$dest" ]; then
            echo "${dest}: Directory exists; Updating" >&2
            $GIT_CMD -C "$dest" pull --recurse-submodules || return $?
        else
            local repo_url=${params[$base_url]}/${repo}



            echo "*** Cloning ${repo_url} and any submodules" >&2
            $GIT_CMD -C "$PICO_BASEDIR" clone -b "$branch" \
                     "$repo_url" 2>/dev/null || return $?
            if test ."$repo" = .'micropython'; then
                $MAKE_CMD -C "${dest}/ports/rp2" \
                          BOARD="${params[pico-board]}" submodules \
                    || return $?
            else
                $GIT_CMD -C "$dest" submodule update --init || return $?
            fi
        fi
    done
}

install-libgpiod-tools ()
{
    local -n params=$1

    echo "*** Building GPIO library and tools" >&2
    pushd "${params[pico-basedir]}/libgpiod" || return $?
    $AUTOUPDATE_CMD || return $?
    $GIT_CMD commit -a --no-gpg-sign -m 'Run autoupdate.' || return $?
    ./autogen.sh --enable-tools=yes || return $?
    ./configure || return $?
    $MAKE_CMD || return $?
    $SUDO_CMD $MAKE_CMD install || return $?
    popd
}

build-examples ()
{
    local -n examples=$1
    local -n cmake_args=$2

    local build_dir=${PICO_EXAMPLES_PATH}/build

    $CMAKE_CMD -S "$PICO_EXAMPLES_PATH" -B "$build_dir" \
               ${cmake_args[0]:+"${cmake_args[@]}"} || return $?

    for example in "${examples[@]}"; do
        echo "*** Building Pico example project: ${example}" >&2
        $MAKE_CMD -C "${build_dir}/${example}" \
                  -j$(${NPROC_CMD:-sysctl -n hw.ncpu}) \
            || return $?
    done
}

install-tools ()
{
    local -n pico_tools=$1

    local tool=''
    local source_dir=''
    local build_dir=''

    for tool in "${pico_tools[@]}"; do
        source_dir=${PICO_BASEDIR}/${tool}
        build_dir=${source_dir}/build

        echo "*** Building Pico tool: ${tool}" >&2
        $CMAKE_CMD -S "$source_dir"  -B "$build_dir" || return $?
        $MAKE_CMD -C "$build_dir" -j$(${NPROC_CMD:-sysctl -n hw.ncpu}) \
            || return $?

        if test ."$tool" = .'picotool'; then
            $SUDO_CMD $MAKE_CMD -C "$build_dir" install
        fi
    done
}

install-openocd ()
{
    declare status=''

    echo "*** Building OpenOCD" >&2
    pushd "${PICO_BASEDIR}/openocd"
    ./bootstrap || { status=$?; popd; return "$status"; }
    case "$OSTYPE" in
        linux-gnu)
            ./configure --enable-sysfsgpio --enable-bcm2835gpio \
                        --enable-picoprobe \
                || { status=$?; popd; return "$status"; }
            ;;
        darwin*)
            ./configure --enable-picoprobe \
                || { status=$?; popd; return "$status"; }
            ;;
    esac

    $MAKE_CMD -j$(${NPROC_CMD:-sysctl -n hw.ncpu}) \
        || { status=$?; popd; return "$status"; }
    $SUDO_CMD $MAKE_CMD install || { status=$?; popd; return "$status"; }
    popd
}

install-openocd-udev-rules ()
{
    local udev_rules=60-openocd.rules

    if test ! -x "$UDEVADM_CMD" \
            || test -f "/etc/udev/rules.d/${udev_rules}"; then
        return 0
    fi

    echo "*** Installing OpenOCD udev rules" >&2
    pushd "${PICO_BASEDIR}/openocd"

    $SUDO_CMD $ED_CMD "contrib/${udev_rules}" <<EOF || return $?
g/, GROUP="plugdev"/s///
/{idVendor}=="2e8a"/t
s/0004/000c/
wq /etc/udev/rules.d/${udev_rules}
EOF
    popd

    $SUDO_CMD $UDEVADM_CMD control --reload-rules \
        && $SUDO_CMD $UDEVADM_CMD trigger
}

build-micropython ()
{
    local -n params=$1

    local dest=${PICO_BASEDIR}/micropython

    echo "*** Building MicroPython" >&2
    pushd "${PICO_BASEDIR}/micropython"

    local mpconfigport_h=ports/rp2/mpconfigport.h

    if $GREP_CMD '^#define MICROPY_HW_ENABLE_UART_REPL' "$mpconfigport_h" \
            | $GREP_CMD -q 0; then

        # Enable REPL over UART.
        $SED_CMD -i -e '/^#define MICROPY_HW_ENABLE_UART_REPL/s/0/1/' \
                 "$mpconfigport_h" || { status=$?; popd; return "$status"; }
        $GIT_CMD commit -a --no-gpg-sign -m 'Enable UART REPL.' \
            || { status=$?; popd; return "$status"; }
    fi

    $MAKE_CMD -j$(${NPROC_CMD:-sysctl -n hw.ncpu}) -C "${dest}/mpy-cross" \
              BOARD="${params[pico-board]}" \
        || { status=$?; popd; return "$status"; }
    $MAKE_CMD -j$(${NPROC_CMD:-sysctl -n hw.ncpu}) -C "${dest}/ports/rp2" \
              BOARD="${params[pico-board]}" clean \
        || { status=$?; popd; return "$status"; }
    $MAKE_CMD -j$(${NPROC_CMD:-sysctl -n hw.ncpu}) -C "${dest}/ports/rp2" \
              BOARD="${params[pico-board]}" \
        || { status=$?; popd; return "$status"; }
    popd
}

get-init-scripts ()
{
    local shell=''

    case "$OSTYPE" in
        linux-gnu)
            shell=$(getent passwd $USER | awk -F/ '{ print $NF }')
            ;;
        darwin*)
            shell=$(dscl . -read /Users/$USER UserShell | awk -F/ '{ print $NF }' )
            ;;
        *)
            echo '${OSTYPE}: Unsupported operating system' >&2
            return 1
            ;;
    esac

    case "$shell" in
        bash)
            echo ~/.bashrc and ~/.bash_profile
            ;;
        ksh)
            echo ~/.ksh and ~/.profile
            ;;
        zsh)
            echo ~/.zshrc and ~/.zprofile
            ;;
        *)
            echo ~/.profile
            ;;
    esac
}

clean-up ()
{
    local -n params=$1

    local init_scripts=$(get-init-scripts)

    $CAT_CMD <<EOF

*** Please add the code below to ${init_scripts},
*** then run:
***
***    source ${init_scripts%% *}
***
*** before proceeding.

################################################################
pico_basedir=${params[pico-basedir]}

if test -d "\$pico_basedir"; then
    export RP2_TOPLEVEL=${script_dir} \\
           PICO_BOARD=${params[pico-board],,} \\
           PICO_BASEDIR=\$pico_basedir \\
           PICO_SDK_PATH=\${pico_basedir}/pico-sdk \\
           PICO_EXAMPLES_PATH=\${pico_basedir}/pico-examples \\
           PICO_EXTRAS_PATH=\${pico_basedir}/pico-extras \\
           PICO_PLAYGROUND_PATH=\${pico_basedir}/pico-playground
fi
################################################################

EOF
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=$(resolve-existing $0)
    declare script_name=${script##*/}
    declare script_dir=${script%/*}

    declare pico_basedir=${1:-"${PWD}/build"}
    declare pico_board=${2:-pico}

    if test -f /etc/os-release; then
        source /etc/os-release
    fi

    declare -A parameters=(
        [rpi]=https://github.com/raspberrypi
        [mpy]=https://github.com/micropython
        [libgpiod]=https://git.kernel.org/pub/scm/libs/libgpiod
        [default-branch]=develop
        [pico-board]=${pico_board^^}
        [pico-basedir]=$pico_basedir
        [id]=${ID:-'darwin'}
    )

    # For a given repository, the default branch may be overriden by
    # appending to the name `/branch-name'.
    declare -a repositories=(
        rpi.pico-sdk
        rpi.pico-examples
        rpi.pico-extras/master
        rpi.pico-playground/master
        rpi.picoprobe/master
        rpi.picotool
        rpi.openocd/rp2040
        mpy.micropython/master
        libgpiod.libgpiod/master
    )
    declare -a cmake_parameters=(
        -DCMAKE_BUILD_TYPE=Debug
        -DPICO_BOARD="${pico_board,,}"
    )
    declare -a examples_list=(
        blink
        hello_world
    )
    declare tools_list=(
        picoprobe
        picotool
    )

    echo "Pico SDK base directory: ${pico_basedir}" >&2
    echo "Pico board: ${pico_board}" >&2

    if test ."$PREREQUISITES_INSTALLED" = .'true'; then
        : no prompt
    elif (( $# >= 1 )); then
        read -n 1 -p 'Press any key to continue...'
    else
        cat >&2 <<EOF
To override default base directory and/or board, use:

    ${script_name} desired-base-dir pico-board

EOF
        read -n 1 -p 'Otherwise, press any key to continue...'
    fi
    echo >&2

    initialize-git-config

    if test ."$PREREQUISITES_INSTALLED" != .'true'; then
        declare -i pkgs_installed_before=0
        declare -i pkgs_installed_after=0

        pkgs_installed_before=$(count-installed-packages parameters) || exit $?
        install-prerequisites parameters || exit $?
        pkgs_installed_after=$(count-installed-packages parameters) || exit $?
        if (( pkgs_installed_before != pkgs_installed_after )); then
            ${script_dir}/config.status --recheck
            for config_file in build-sdk-and-upy; do
                ${script_dir}/config.status "$config_file"
            done
            exec env PREREQUISITES_INSTALLED=true "$0" "$@"
        fi
    fi

    clone-repositories parameters repositories || exit $?

    if test ."$ID" = .'fedora'; then
        install-libgpiod-tools parameters
    fi

    build-examples examples_list cmake_parameters || exit $?
    install-tools tools_list || exit $?
    install-openocd || exit $?
    install-openocd-udev-rules || exit $?
    build-micropython parameters || exit $?
    clean-up parameters || exit $?
fi
